import { z } from 'zod';

const configBoolean = z.enum(['true', 'false']).transform((arg) => JSON.parse(arg));

const configNumber = z
  .union([z.string(), z.number()])
  .transform((arg) => (typeof arg === 'number' ? arg : parseInt(arg, 10)))
  .pipe(z.number());

const configArray = (items: z.ZodTypeAny) =>
  z
    .union([z.array(items), z.string()])
    .transform((arg) => (Array.isArray(arg) ? arg : arg.split(',').map((item) => item.trim())))
    .pipe(z.array(items));

// Schema validation library support (zod only)
const SchemaLibrary = {
  zod: 'zod',
} as const;

const schemaLibraryEnum = z.nativeEnum(SchemaLibrary);

// Enhanced model actions
const ModelAction = {
  // Basic CRUD
  create: 'create',
  createMany: 'createMany',
  findFirst: 'findFirst',
  findFirstOrThrow: 'findFirstOrThrow',
  findMany: 'findMany',
  findUnique: 'findUnique',
  findUniqueOrThrow: 'findUniqueOrThrow',
  update: 'update',
  updateMany: 'updateMany',
  upsert: 'upsert',
  delete: 'delete',
  deleteMany: 'deleteMany',

  // Advanced operations
  aggregate: 'aggregate',
  groupBy: 'groupBy',
  count: 'count',
  findRaw: 'findRaw',
  aggregateRaw: 'aggregateRaw',
} as const;

export const configSchema = z.object({
  // Basic configuration
  output: z.string().default('./src/generated/orpc'),
  // When empty, generator will inline a minimal Context type and import PrismaClient types directly
  contextPath: z.string().default(''),

  // Schema validation
  schemaLibrary: schemaLibraryEnum.default('zod'),
  generateInputValidation: configBoolean.default('true'),
  generateOutputValidation: configBoolean.default('true'),
  strictValidation: configBoolean.default('true'),
  // Always import schemas generated by 'prisma-zod-generator' when using 'zod'
  // Programmatic zod generator output path (relative to ORPC output dir or a module specifier)
  zodSchemasOutputPath: z.string().default('./zod-schemas'),
  // Module specifier or relative path to import from (defaults to zodSchemasOutputPath)
  externalZodImportPath: z.string().default('./zod-schemas'),
  // prisma-zod-generator DateTime handling strategy
  // - 'date' (z.date())
  // - 'coerce' (z.coerce.date())
  // - 'isoString' (z.string().regex(ISO).transform(v => new Date(v)))
  zodDateTimeStrategy: z.enum(['date', 'coerce', 'isoString']).default('coerce'),

  // Path to custom zod.config.json file (relative to schema or absolute)
  zodConfigPath: z.string().optional(),

  // Documentation / HTTP layer configuration
  // Documentation / HTTP settings

  apiTitle: z.string().default('Generated API'),
  apiDescription: z.string().default('Auto-generated API from Prisma schema'),
  apiVersion: z.string().default('1.0.0'),
  serverPort: configNumber.default(3000),
  apiPrefix: z.string().default(''),

  // Runtime configuration

  // Model operations
  // Accept any string list, then filter to supported actions to remain backward-compatible
  generateModelActions: configArray(z.string())
    .transform((arr) =>
      (arr as string[]).filter((a: string) =>
        (Object.values(ModelAction) as readonly string[]).includes(a)
      )
    )
    .default(Object.values(ModelAction)),
  showModelNameInProcedure: configBoolean.default('true'),
  enableSoftDeletes: configBoolean.default('false'),
  generateRelationResolvers: configBoolean.default('true'),

  // Developer experience
  generateDocumentation: configBoolean.default('false'),
  generateTests: configBoolean.default('false'),
  enableDebugLogging: configBoolean.default('false'),

  // Code generation options
  useBarrelExports: configBoolean.default('true'),
  codeStyle: z.enum(['prettier', 'none']).default('prettier'),

  // Response shaping / integration modes
  // When false, handlers return raw Prisma results instead of { success, data, meta } envelope
  wrapResponses: configBoolean.default('false'),

  // Error handling
  generateErrorHandling: configBoolean.default('true'),

  // Compatibility
  prismaClientPath: z.string().default('@prisma/client'),
});

export type Config = z.infer<typeof configSchema>;

// Default configuration for different scenarios
export const defaultConfigs = {
  basic: {},

  production: {},

  serverless: {},

  enterprise: {
    generateTests: 'true',
  },
} as const;

export { ModelAction, SchemaLibrary };
